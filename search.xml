<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue源码分析--watch和computed的执行过程</title>
      <link href="/2020/04/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
      <url>/2020/04/13/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>首先先调用initState方法，进入 initMethods、initData方法，获取到方法和data数据，再进入observe，执行initComputed和initWatch</p><p>initComputed：<br>initComputed方法定义computedWatchers，再遍历computed对象拿到对应的每个key，然后赋值给getter，然后实例化一个wathers（new Watcher），将当前的实例push到vm.watchers中,然后此时dirty和computed一致都为true，然后创建deps，和set实例对象，而value此时是为空的（因为computed是延迟计算的），然后实例化一个Dep的对象，然后执行dep.depend方法将渲染watcher收集subs中，然后进入watcher.evalute方法进行求值调用this.get这个过程中执行pushTarget方法将computed watcher push到Dep.target中将渲染watcher替代然后执行get.call，最后将value返回,然后将dirty置为false，然后将return value，然后渲染文案<br>当数据发生变化，执行set调用reactiveSetter，对比新新旧值，若果相等则不会触发cb就是不会触发渲染watcher的update，如不相等而且computed为true然后判断dep.subs.length，因为长度不为0，然后执行getAndInvoke方法，然后进行一次重新求值最后执行dep.notify遍历subs调用渲染watcher（vm._render）的update方法，执行queueWatcher进行重新渲染，</p><p>initWatch：<br>调用initWatch，遍历watch，拿到对应的handler函数，再调用createWatcher做数据的规范化，转成期望的类型，$watch将callback变成函数，将user置为true，则这个watch为user watcher,然后执行new watcher，如果是函数则直接赋值给getter，如果是字符串则会调用paresPath将路径变成数组返回然后返回一个函数给getter，然后执行get进行求值，调用pushTarget将dep.target赋值为user watcher，用user watcher订阅了依赖的变化，然后执行getter方法就是paresPath返回的函数，然后会触发dep.depend，将user watcher订阅到dep中，然后调用popTarget和cleanupDeps，然后再进行一个返回return value<br>一旦计算属性发生变化的时候执行set调用reactiveSetter方法，执行dep.notify，调用subs里面的订阅者的update方法，判断sync如果为true，则执行this.run(所以这里为什么将sync置为true可以提高优先级的原因了)。否则执行queueWatcher的过程就是把watcher添加到watcher队列里面，然后进入nextTick后执行flush，执行Watcher.run方法，下面的this.run的执行</p><p>（判断sync，如果为true，则执行this.run然后跳用getAndInvoke方法这里面会进行一次get求新值，对比前后的value值，若数据发生了变化就将dirty置为false，（如果dirty为true会调用evaluate方法再执行一次get，然后将dirty置为false，再返回这个value），然后执行watcher定义的回调函数callback，直接调用函数调用dep.notify通知user watcher的update然后进行user watcher的一个回调handler，user watcher会订阅computedWatcher的dep 调用popTarget和cleanupDeps，然后再进行一个返回return value）</p><p>（然后判断deep，如果为true则执行traverse方法会深度遍历对象然后给每个属性进行监听，然后调用popTarget和cleanupDeps，然后再进行一个返回return value）</p><p>deep深度监听有一个traverse函数，</p><p>若进行深度监听deep，想提升优先级可以将sync置为true则会优先执行，因为默认的user watcher都是异步的也就是在nextTick才会执行回调</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> node </tag>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/13/hello-world/"/>
      <url>/2020/04/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
